package main.memoire.app;

import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Frame;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.JDialog;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JPanel;

public class WritingFrame extends javax.swing.JFrame {
    private Memoire currentMemoire;
    private int currentMemoireId;
    
    public WritingFrame() {
        initComponents();
        setSize(550, 600);
        setLocationRelativeTo(null);
        
        // Initialize currentMemoire as a new memo for a new note
        currentMemoire = new Memoire(); 
        
        // Set default date/time info for a new note
        updateDateTimeInfo(null, null);
        reloadCategories();
    }
    
    // Setters for form fields
    @Override
    public void setTitle(String title) {
        titleTxtField.setText(title);
    }

    public void setCategory(String category) {
        categoryCombox.setSelectedItem(category);
    }

    public void setContents(String contents) {
        memoireTxtPane.setText(contents);
    }

    public final void updateDateTimeInfo(Date createdDate, Timestamp lastEdited) {
        dateTimeInfoLabel.setText(formatDate(createdDate, lastEdited));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        topPanel = new javax.swing.JPanel();
        dateTimeInfoLabel = new javax.swing.JLabel();
        saveBtn = new javax.swing.JButton();
        bodyPanel = new javax.swing.JPanel();
        categoryPanel = new javax.swing.JPanel();
        categoryLabel = new javax.swing.JLabel();
        categoryCombox = new javax.swing.JComboBox<>();
        memoireTxtPaneHelpPanel = new javax.swing.JPanel();
        memoireScrollPane = new javax.swing.JScrollPane();
        memoireTxtPane = new javax.swing.JTextPane();
        titleTxtField = new javax.swing.JTextField();
        separator3 = new javax.swing.JSeparator();
        separator4 = new javax.swing.JSeparator();
        editorPanel = new javax.swing.JPanel();
        deleteBtn = new javax.swing.JButton();
        addCategoryBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Your MÃ‰moire");

        topPanel.setBackground(new java.awt.Color(255, 241, 214));
        topPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));
        topPanel.setPreferredSize(new java.awt.Dimension(550, 48));
        topPanel.setLayout(new java.awt.BorderLayout());

        dateTimeInfoLabel.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        dateTimeInfoLabel.setForeground(new java.awt.Color(211, 211, 211));
        dateTimeInfoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/schedule.png"))); // NOI18N
        dateTimeInfoLabel.setText("date.time.info");
        dateTimeInfoLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 5, 10, 5));
        topPanel.add(dateTimeInfoLabel, java.awt.BorderLayout.CENTER);

        saveBtn.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        saveBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/check.png"))); // NOI18N
        saveBtn.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        saveBtn.setBorderPainted(false);
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });
        topPanel.add(saveBtn, java.awt.BorderLayout.EAST);

        getContentPane().add(topPanel, java.awt.BorderLayout.NORTH);

        bodyPanel.setBackground(new java.awt.Color(255, 241, 214));
        bodyPanel.setPreferredSize(new java.awt.Dimension(500, 2));
        bodyPanel.setLayout(new java.awt.GridBagLayout());

        categoryPanel.setOpaque(false);

        categoryLabel.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        categoryLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/label.png"))); // NOI18N
        categoryLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        categoryPanel.add(categoryLabel);

        categoryCombox.setEditable(true);
        categoryCombox.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        categoryCombox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No Category" }));
        categoryCombox.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 241, 214)));
        categoryCombox.setName(""); // NOI18N
        categoryCombox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryComboxActionPerformed(evt);
            }
        });
        categoryPanel.add(categoryCombox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 6, 1, 6);
        bodyPanel.add(categoryPanel, gridBagConstraints);

        memoireTxtPaneHelpPanel.setBackground(new java.awt.Color(255, 255, 255));
        memoireTxtPaneHelpPanel.setLayout(new java.awt.GridLayout(1, 0));

        memoireTxtPane.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        memoireScrollPane.setViewportView(memoireTxtPane);

        memoireTxtPaneHelpPanel.add(memoireScrollPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        bodyPanel.add(memoireTxtPaneHelpPanel, gridBagConstraints);

        titleTxtField.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        titleTxtField.setText("Title");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        bodyPanel.add(titleTxtField, gridBagConstraints);

        separator3.setPreferredSize(new java.awt.Dimension(520, 2));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        bodyPanel.add(separator3, gridBagConstraints);

        separator4.setPreferredSize(new java.awt.Dimension(520, 2));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        bodyPanel.add(separator4, gridBagConstraints);

        editorPanel.setOpaque(false);
        editorPanel.setLayout(new java.awt.GridLayout(1, 0, 20, 0));

        deleteBtn.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        deleteBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/delete.png"))); // NOI18N
        deleteBtn.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        deleteBtn.setBorderPainted(false);
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });
        editorPanel.add(deleteBtn);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        bodyPanel.add(editorPanel, gridBagConstraints);

        addCategoryBtn.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        addCategoryBtn.setForeground(new java.awt.Color(165, 139, 108));
        addCategoryBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/new_label.png"))); // NOI18N
        addCategoryBtn.setText("Add New Category");
        addCategoryBtn.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        addCategoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCategoryBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(1, 6, 1, 6);
        bodyPanel.add(addCategoryBtn, gridBagConstraints);

        getContentPane().add(bodyPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        // Get the current memo from the UI fields (assuming you have fields like titleTxtField, categoryTxtField, etc.)
        String title = titleTxtField.getText();
        String category = (String) categoryCombox.getSelectedItem();
        String contents = memoireTxtPane.getText();
        Timestamp lastEdited = new Timestamp(System.currentTimeMillis());

         // If it's a new memo, create one, else update the current memo
        if (currentMemoire.getId() == 0) {
            currentMemoire = new Memoire(title, category, contents);
            currentMemoire.setLastEdited(lastEdited);
        } else {
            currentMemoire.setTitle(title);
            currentMemoire.setCategory(category);
            currentMemoire.setContents(contents);
            currentMemoire.setLastEdited(lastEdited);
        }

        try {
            // Save or update the memo
            MemoireHelper.saveMemoire(currentMemoire);
            JOptionPane.showMessageDialog(this, "Memo saved successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error saving memo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_saveBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        if (currentMemoireId == 0) {
            JOptionPane.showMessageDialog(this, "No memoire selected to delete.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this memoire?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                MemoireHelper.deleteMemoire(currentMemoireId);
                JOptionPane.showMessageDialog(this, "Memoire deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                resetForm();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error deleting memoire: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void addCategoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCategoryBtnActionPerformed
        // Create and display the NewCategoryDialog
        NewCategoryDialog dialog = new NewCategoryDialog(this);
        dialog.setVisible(true);  // Show the dialog and wait for it to close

        // Retrieve the new category after the dialog is closed
        String newCategory = dialog.getNewCategory();

        // Proceed if the new category is valid (not null and not empty)
        if (newCategory != null && !newCategory.isEmpty()) {
            try {
                // Save the new category using MemoireHelper
                MemoireHelper.saveCategory(newCategory, categoryCombox);
                // Reload the categories to update the category list in the UI
                reloadCategories();
                // Show success message
                JOptionPane.showMessageDialog(this, "Category added successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error adding category to the database.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // If category is empty or null, show a message
            JOptionPane.showMessageDialog(this, "Please enter a valid category.", "Input Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_addCategoryBtnActionPerformed

    private void categoryComboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryComboxActionPerformed
        ////
    }//GEN-LAST:event_categoryComboxActionPerformed
        
    // Methods to handle Memoire data
    public void setMemoireData(Memoire memoire) {
        this.currentMemoire = memoire;
        this.currentMemoireId = memoire.getId();

        setTitle(memoire.getTitle());
        setCategory(memoire.getCategory());
        setContents(memoire.getContents());
        updateDateTimeInfo(memoire.getDayDateCreated(), memoire.getLastEdited());
    }
    
    private void resetForm() {
        titleTxtField.setText("");
        memoireTxtPane.setText("");
        categoryCombox.setSelectedIndex(0);
        currentMemoireId = 0;
        dateTimeInfoLabel.setText("New memo. Save to track changes.");
    }
    
    private void reloadCategories() { 
        categoryCombox.removeAllItems(); // Remove existing items from the combo box
        try (Connection conn = MemoireConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT DISTINCT category FROM memoire_list WHERE category IS NOT NULL AND category != ''")) {
            while (rs.next()) {
                categoryCombox.addItem(rs.getString("category"));
            }
            categoryCombox.addItem("No Category");  // Add "No Category" as a fallback option
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error loading categories: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Helper method to check if the category is already in the JComboBox
    private boolean categoryExistsInComboBox(String category) {
        for (int i = 0; i < categoryCombox.getItemCount(); i++) {
            if (categoryCombox.getItemAt(i).equals(category)) {
                return true;  // Category already exists in the combobox
            }
        }
        return false;  // Category doesn't exist in the combobox
    }

    private String formatDate(Date createdDate, Timestamp lastEdited) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("EEEE, dd-MM-yyyy");
        SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");
        if (createdDate == null) {
            return "This is a new note. Please save your changes.";
        }
        String formattedDate = "Created on " + dateFormat.format(createdDate);
        if (lastEdited != null) {
            formattedDate += ", Last Edited at " + timeFormat.format(lastEdited);
        }
        return formattedDate;
    }
    
    private class NewCategoryDialog extends JDialog {
        private final JTextField categoryTextField;
        private final JButton okButton;
        private final JButton cancelButton;
        private String newCategory;

        // Constructor to initialize the dialog
        public NewCategoryDialog(Frame parent) {
            super(parent, "New Category", true);
            setSize(350, 150);
            setLocationRelativeTo(parent);

            // Disable maximize button (non-resizable)
            setResizable(false);  // Prevent resizing
            setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);

            // Initialize components
            categoryTextField = new JTextField(20);
            categoryTextField.setPreferredSize(new Dimension(100, 25));
            okButton = new JButton("OK");
            cancelButton = new JButton("Cancel");

            // Layout the components using GridBagLayout for better alignment
            setLayout(new java.awt.GridBagLayout());
            java.awt.GridBagConstraints gbc = new java.awt.GridBagConstraints();
            gbc.insets = new java.awt.Insets(10, 10, 10, 10); // Padding around components

            // Label for the category
            gbc.gridx = 0;
            gbc.gridy = 0;
            gbc.anchor = java.awt.GridBagConstraints.WEST;
            gbc.gridwidth = 1;
            add(new JLabel("Enter new category:"), gbc);

            // TextField for entering category
            gbc.gridx = 1;
            gbc.gridy = 0;
            gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gbc.weightx = 1.0;  // This will make the JTextField expand horizontally
            add(categoryTextField, gbc);

            // Button panel to hold OK and Cancel buttons
            gbc.gridx = 0;
            gbc.gridy = 1;
            gbc.gridwidth = 2;  // Make it span both columns
            gbc.anchor = java.awt.GridBagConstraints.CENTER;
            gbc.fill = java.awt.GridBagConstraints.NONE;

            // Using a JPanel for buttons with FlowLayout for better alignment
            JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 5));  // Spacing between buttons
            buttonPanel.add(okButton);
            buttonPanel.add(cancelButton);
            add(buttonPanel, gbc);

            // Add action listeners for OK and Cancel buttons
            okButton.addActionListener(evt -> onOk());
            cancelButton.addActionListener(evt -> onCancel());

            // Set default button for better user experience
            getRootPane().setDefaultButton(okButton);
        }

        // Getter for the entered category
        public String getNewCategory() {
            return newCategory;
        }

        // Handle OK button click (set the new category)
        private void onOk() {
            newCategory = categoryTextField.getText().trim();
            if (!newCategory.isEmpty() && newCategory.length() <= 50) {  // Limit the length to 50
                dispose(); // Close the dialog if input is valid
            } else {
                JOptionPane.showMessageDialog(this, "Category cannot be empty or longer than 50 characters!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

        // Handle Cancel button click (close the dialog without saving)
        private void onCancel() {
            newCategory = null; // Reset category to null to indicate no input
            dispose(); // Close the dialog
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WritingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WritingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WritingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WritingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new WritingFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCategoryBtn;
    private javax.swing.JPanel bodyPanel;
    private javax.swing.JComboBox<String> categoryCombox;
    private javax.swing.JLabel categoryLabel;
    private javax.swing.JPanel categoryPanel;
    private javax.swing.JLabel dateTimeInfoLabel;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JPanel editorPanel;
    private javax.swing.JScrollPane memoireScrollPane;
    private javax.swing.JTextPane memoireTxtPane;
    private javax.swing.JPanel memoireTxtPaneHelpPanel;
    private javax.swing.JButton saveBtn;
    private javax.swing.JSeparator separator3;
    private javax.swing.JSeparator separator4;
    private javax.swing.JTextField titleTxtField;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables
}
