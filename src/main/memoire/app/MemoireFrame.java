package main.memoire.app;

import java.awt.HeadlessException;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.swing.*;
import javax.swing.table.AbstractTableModel;
import java.util.concurrent.ExecutionException;

public class MemoireFrame extends javax.swing.JFrame {
    
    public MemoireFrame() {
        initComponents();
        setSize(1000, 600);
        setLocationRelativeTo(null);

    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        sidebarPanel = new javax.swing.JPanel();
        sidebarHelpPanel = new javax.swing.JPanel();
        sidebarIcon = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        countLabel = new javax.swing.JLabel();
        todayMemoireBtn = new javax.swing.JButton();
        allMemoireBtn = new javax.swing.JButton();
        newMemoireBtn = new javax.swing.JButton();
        importBtn = new javax.swing.JButton();
        exportBtn = new javax.swing.JButton();
        separator2 = new javax.swing.JSeparator();
        separator1 = new javax.swing.JSeparator();
        mainPanel = new javax.swing.JPanel();
        searchPanel = new javax.swing.JPanel();
        searchTxtField = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        listTableScrollPane = new javax.swing.JScrollPane();
        listTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MÉmoire");

        sidebarPanel.setBackground(new java.awt.Color(211, 211, 211));
        sidebarPanel.setPreferredSize(new java.awt.Dimension(250, 600));
        sidebarPanel.setLayout(new java.awt.BorderLayout());

        sidebarHelpPanel.setOpaque(false);
        sidebarHelpPanel.setPreferredSize(new java.awt.Dimension(250, 340));
        sidebarHelpPanel.setLayout(new java.awt.GridBagLayout());

        sidebarIcon.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        sidebarIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/thumbnail_bar.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        sidebarHelpPanel.add(sidebarIcon, gridBagConstraints);

        dateLabel.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        dateLabel.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        sidebarHelpPanel.add(dateLabel, gridBagConstraints);

        countLabel.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        countLabel.setForeground(new java.awt.Color(165, 139, 108));
        countLabel.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        sidebarHelpPanel.add(countLabel, gridBagConstraints);

        todayMemoireBtn.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        todayMemoireBtn.setForeground(new java.awt.Color(165, 139, 108));
        todayMemoireBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/book_ribbon.png"))); // NOI18N
        todayMemoireBtn.setText("Mémoires of Today");
        todayMemoireBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        todayMemoireBtn.setBorderPainted(false);
        todayMemoireBtn.setFocusPainted(false);
        todayMemoireBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                todayMemoireBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        sidebarHelpPanel.add(todayMemoireBtn, gridBagConstraints);

        allMemoireBtn.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        allMemoireBtn.setForeground(new java.awt.Color(165, 139, 108));
        allMemoireBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/book_5.png"))); // NOI18N
        allMemoireBtn.setText("All Mémoires");
        allMemoireBtn.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        allMemoireBtn.setBorderPainted(false);
        allMemoireBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allMemoireBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        sidebarHelpPanel.add(allMemoireBtn, gridBagConstraints);

        newMemoireBtn.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        newMemoireBtn.setForeground(new java.awt.Color(165, 139, 108));
        newMemoireBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/note_add.png"))); // NOI18N
        newMemoireBtn.setText("New Mémoires");
        newMemoireBtn.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        newMemoireBtn.setBorderPainted(false);
        newMemoireBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMemoireBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        sidebarHelpPanel.add(newMemoireBtn, gridBagConstraints);

        importBtn.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        importBtn.setForeground(new java.awt.Color(165, 139, 108));
        importBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/upload.png"))); // NOI18N
        importBtn.setText("Import");
        importBtn.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        importBtn.setBorderPainted(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        sidebarHelpPanel.add(importBtn, gridBagConstraints);

        exportBtn.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        exportBtn.setForeground(new java.awt.Color(165, 139, 108));
        exportBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/download.png"))); // NOI18N
        exportBtn.setText("Export");
        exportBtn.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        exportBtn.setBorderPainted(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        sidebarHelpPanel.add(exportBtn, gridBagConstraints);

        separator2.setForeground(new java.awt.Color(176, 176, 176));
        separator2.setPreferredSize(new java.awt.Dimension(200, 2));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        sidebarHelpPanel.add(separator2, gridBagConstraints);

        separator1.setForeground(new java.awt.Color(176, 176, 176));
        separator1.setPreferredSize(new java.awt.Dimension(200, 2));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        sidebarHelpPanel.add(separator1, gridBagConstraints);

        sidebarPanel.add(sidebarHelpPanel, java.awt.BorderLayout.NORTH);

        getContentPane().add(sidebarPanel, java.awt.BorderLayout.WEST);

        mainPanel.setBackground(new java.awt.Color(255, 255, 255));
        mainPanel.setPreferredSize(new java.awt.Dimension(300, 600));
        mainPanel.setLayout(new java.awt.BorderLayout());

        searchPanel.setBackground(new java.awt.Color(255, 255, 255));
        searchPanel.setAlignmentY(0.0F);
        searchPanel.setOpaque(false);
        searchPanel.setLayout(new javax.swing.BoxLayout(searchPanel, javax.swing.BoxLayout.X_AXIS));

        searchTxtField.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        searchTxtField.setText("Search Your Mémoires . . .");
        searchTxtField.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        searchPanel.add(searchTxtField);

        searchBtn.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        searchBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/search.png"))); // NOI18N
        searchBtn.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        searchBtn.setBorderPainted(false);
        searchPanel.add(searchBtn);

        mainPanel.add(searchPanel, java.awt.BorderLayout.NORTH);

        listTable.setAutoCreateRowSorter(true);
        listTable.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        listTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Created", "Title", "Preview", "Category", "Last Updated"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        listTableScrollPane.setViewportView(listTable);

        mainPanel.add(listTableScrollPane, java.awt.BorderLayout.LINE_START);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void todayMemoireBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_todayMemoireBtnActionPerformed
        // This method is called when "Today Memos" button is clicked
        SwingWorker<List<Memoire>, Void> worker = new SwingWorker<List<Memoire>, Void>() {
            @Override
            protected List<Memoire> doInBackground() throws Exception {
                // Fetch the memos created today from the database
                return MemoireConnection.getMemosCreatedToday();
            }

            @Override
            protected void done() {
                try {
                    // Get the result of the background task
                    List<Memoire> todayMemos = get();

                    // Check if there are any memos for today
                    if (todayMemos.isEmpty()) {
                        JOptionPane.showMessageDialog(MemoireFrame.this, "No memoires for today.");
                    } else {
                        // Create a new ListTableModel with the fetched data
                        ListTableModel tableModel = new ListTableModel(todayMemos);

                        // Set the table model to display today's memoires
                        listTable.setModel(tableModel);

                        // Manually refresh the table to ensure it updates
                        listTable.revalidate();
                        listTable.repaint();
                    }
                } catch (ExecutionException e) {
                    JOptionPane.showMessageDialog(MemoireFrame.this, "Error loading today's memoires: " + e.getMessage(), "Execution Error", JOptionPane.ERROR_MESSAGE);
                } catch (HeadlessException | InterruptedException e) {
                    JOptionPane.showMessageDialog(MemoireFrame.this, "Error loading today's memoires: " + e.getMessage(), "Unknown Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        };

        // Start the background task
        worker.execute();
    }//GEN-LAST:event_todayMemoireBtnActionPerformed

    private void allMemoireBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allMemoireBtnActionPerformed
        // This method is called when "All Memos" button is clicked
        try {
            // Fetch all memos from the database
            List<Memoire> allMemos = MemoireConnection.getAllMemos();
            if (allMemos.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No memoires.");
            } else {
                // Create a new ListTableModel with the fetched data
                ListTableModel tableModel = new ListTableModel(allMemos);

                // Set the table model to display today's memos
                listTable.setModel(tableModel);

                // Manually refresh the table to ensure it updates
                listTable.revalidate();
                listTable.repaint();
            }
        } catch (SQLException e) {
            // Show an error dialog if the database query fails
            JOptionPane.showMessageDialog(this, "Error loading all memoires: " + e.getMessage(), 
                                          "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_allMemoireBtnActionPerformed

    private void newMemoireBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMemoireBtnActionPerformed
        // Disable MemoireFrame while WritingFrame is open
        this.setEnabled(false);

        // Create an instance of WritingFrame (JFrame)
        WritingFrame writingFrame = new WritingFrame();
        writingFrame.setVisible(true);

        // Re-enable MemoireFrame after WritingFrame is closed
        writingFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                setEnabled(true);  // Re-enable MemoireFrame
            }
        });
    }//GEN-LAST:event_newMemoireBtnActionPerformed
    
    // Methods
    // Custom TableModel class inside MemoireFrame
    private class ListTableModel extends AbstractTableModel {

        private final List<Memoire> memoires;
        private final String[] columnNames = { "Day & Date Created", "Title", "Preview", "Category", "Last Edited" };

        public ListTableModel(List<Memoire> memoires) {
            this.memoires = memoires;
        }

        @Override
        public int getRowCount() {
            return memoires.size();
        }

        @Override
        public int getColumnCount() {
            return columnNames.length;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Memoire memoire = memoires.get(rowIndex);
            
            return switch (columnIndex) {
                case 0 -> formatDate(memoire.getDayDateCreated()); 
                case 1 -> memoire.getTitle();
                case 2 -> memoire.getContents().length() > 20 ? memoire.getContents().substring(0, 20) : memoire.getContents();
                case 3 -> memoire.getCategory();
                case 4 -> formatTimestamp(memoire.getLastEdited());
                default -> null;
            };
            // Day & Date Created
            // Title
            // Preview (First 20 characters of contents)
            // Category
            // Last Edited
        }

        @Override
        public String getColumnName(int column) {
            return columnNames[column];
        }

        private String formatDate(java.sql.Date date) {
            SimpleDateFormat sdf = new SimpleDateFormat("EEEE, dd-MM-yyyy");
            return sdf.format(date);
        }

        private String formatTimestamp(java.sql.Timestamp timestamp) {
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
            return sdf.format(timestamp);
        }
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MemoireFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MemoireFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MemoireFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MemoireFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MemoireFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton allMemoireBtn;
    private javax.swing.JLabel countLabel;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JButton exportBtn;
    private javax.swing.JButton importBtn;
    private javax.swing.JTable listTable;
    private javax.swing.JScrollPane listTableScrollPane;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton newMemoireBtn;
    private javax.swing.JButton searchBtn;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JTextField searchTxtField;
    private javax.swing.JSeparator separator1;
    private javax.swing.JSeparator separator2;
    private javax.swing.JPanel sidebarHelpPanel;
    private javax.swing.JLabel sidebarIcon;
    private javax.swing.JPanel sidebarPanel;
    private javax.swing.JButton todayMemoireBtn;
    // End of variables declaration//GEN-END:variables
}
